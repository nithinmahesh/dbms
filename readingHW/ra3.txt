Compare the relational data model with any of the NoSQL data models discussed in Section 2.1. What are the advantages and disadvantages of each?

Let's compare the relational data model to the Key-Value store model. The key part of the relational data model is the schema of the data. Having a schema allows it to do a set of many complex queries but since Key Value Stores are schemaless, one cannot do much complex queries as the schema is not known at compile time but only at run time and hence it makes the application logic much more complex than necessary thereby inefficient. But this simplicity in the data model allows Key Value stores to be partitioned better and can work very well in a scaled out fashion. Also, key value stores cannot be used to define relationships between entity sets that relational data model allows us to do. This is also a trade-off that one has to accept to when one chooses Key Value stores over relational data models.

Do you agree with the categorization of the different systems shown in Figure 6? Why or why not?

I partly agree with it. The two main questions that needs to be answered decides the system you need - Volume of data, type of querying. RDBMS systems cannot perform well in a scaled out fashion and hence if the volume is really high, RDBMS is out of the question. Same way if complex queries are a must have, then systems using key value store data model are not suited. But this categorization is true at the time this survey was done but it is not exactly accurate as of today as many of these systems have improved and can now cater to more than one use case. For example, SQL Server Hekaton is an in-memory DB for OLTP built by Microsoft in the past 2 years. This can actually be used in the place of the Redis Cache as it gives you much more complex querying capabilities while still giving fast access. So, this figure is a good categorization but one needs to keep themselves constantly updated to see if a system starts to support a new use case. 
